# GPL licensed code gets added to this file, so difference licenses can be kept apart
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


# Test a Network Mask for validity:
# Usage:
#      valid_mask NETMASK
#      if [[ $? -et 0 ]]; then echo good; else echo bad; fi
#   OR
#      if valid_mask NETMASK; then echo good; else echo bad; fi
#
# Source: https://github.com/wstrucke/scs/blob/master/kvm-install.sh
function valid_mask() {
  test $# -eq 1 || return 1
  # extract mask into four numbers
  IFS=. read -r i1 i2 i3 i4 <<< "$1"
  # verify each number is not null
  [[ -z "$i1" || -z "$i2" || -z "$i3" || -z "$i4" ]] && return 1
  # verify each value is numeric only and a positive integer
  test "${1//[^0-9]/}" != "${i1}${i2}${i3}${i4}" && return 1
  # verify any number less than 255 has 255s preceding and 0 following
  [[ $i4 -gt 0 && $i4 -lt 255 && "$i1$i2$i3" != "255255255" ]] && return 1
  [[ $i3 -gt 0 && $i3 -lt 255 && "$i1$i2$i4" != "2552550" ]] && return 1
  [[ $i2 -gt 0 && $i2 -lt 255 && "$i1$i3$i4" != "25500" ]] && return 1
  [[ $i1 -gt 0 && $i1 -lt 255 && "$i2$i3$i4" != "000" ]] && return 1
  # verify each component of the mask is a valid mask
  #   !!FIXME!! i am certain there is a much better way to do this but i could not
  #             come up with it in the time allocated to developing this function
  printf -- " 0 128 192 224 240 248 252 254 255 " |grep -q " $i1 " || return 1
  printf -- " 0 128 192 224 240 248 252 254 255 " |grep -q " $i2 " || return 1
  printf -- " 0 128 192 224 240 248 252 254 255 " |grep -q " $i3 " || return 1
  printf -- " 0 128 192 224 240 248 252 254 255 " |grep -q " $i4 " || return 1
  return 0
}

# return the number of possible IPs in a network based in the cidr mask
#   this intentionally does not account for the network and broadcast address
#
# required:
#   $1   X (where X is the CIDR mask: 0 <= X <= 32 )
#
# Source: https://github.com/wstrucke/scs/blob/master/scs.sh
function cdr2size {
  test $# -ne 1 && return 1
  test "$1" != "${1/[^0-9]/}" && return 1
  if [[ $1 -lt 0 || $1 -gt 32 ]]; then return 1; fi
  echo $(( 1 << ( ( $1 - 32 ) * -1 ) ))
  return 0
}

# check if a host is responding on the network
#   use ssh port (tcp/22) since that is almost exclusively how we manage them
#
# requires:
#   $1	host name or ip
#
# optional:
#   $2	tcp port (default is 22)
#   $3  timeout (default is 2 seconds)
#
# Source: https://github.com/wstrucke/scs/blob/master/scs.sh
function check_host_alive {
  local Port Timeout Pid C=0 Result=0
  if [ $# -eq 0 ]; then return 1; fi
  if [ $# -eq 2 ]; then Port=$2; else Port=22; fi
  if [ $# -eq 3 ]; then Timeout=$3; else Timeout=2; fi
  if [ "$HostOS" == "mac" ]; then
    ( ( exec 3<>/dev/tcp/$1/$Port ) & Pid=$! ; \
      while [[ $( ps -p $Pid |wc -l ) -gt 0 && $C -lt $((Timeout*5)) ]]; do sleep .2; C=$((C+1)); done; \
      if [[ $( ps -p $Pid |wc -l ) -gt 0 ]]; then Result=1; kill $Pid; fi; \
    ) >/dev/null 2>&1
    return $Result
  else
    nc -z -w $Timeout $1 $Port &>/dev/null && return 0 || return 1
  fi
}


# register ssh public key on a remote host
#
# requires:
#  --host <name>         remote host name or ip
#  --user <name>         remote user name
#  --key </path/to/key>  local path to ssh private key
#
# optional:
#  --sudo <name>         user to access server and elevate privileges
#
# Source: https://github.com/wstrucke/scs/blob/master/scs.sh
function register_ssh_key {
  local PrivateKey PublicKey Pass System RemoteUser SudoUser AccessUser Debug=0

  # process arguments
  while [ $# -gt 0 ]; do case $1 in
    --debug) Debug=1;;
    --host) System="$2";;
    --key) PrivateKey="$2";;
    --sudo) SudoUser="$2";;
    --user) RemoteUser="$2";;
    *) err "Invalid argument provided to register_ssh_key";;
  esac; shift 2; done

  if [[ -z "$PrivateKey" || -z "$System" || -z "$RemoteUser" ]]; then err "Invalid arguments provided to register_ssh_key"; fi
  check_host_alive $System || err "Unable to connect to remote host"

  # validate and load private key
  test -s "$PrivateKey" || err "Unable to access private key file"
  PublicKey=$( ssh-keygen -y -P '' -q -f "$PrivateKey" 2>/dev/null )
  if [ $? -eq 1 ]; then err "Unable to load private key file"; fi

  if [[ -n "$SudoUser" ]]; then AccessUser=$SudoUser; else AccessUser=$RemoteUser; fi

  # get the ssh password
  read -sp "Password [$AccessUser]: " Pass; echo
  test -z "$Pass" && err "A password is required to log in to the remote server"

  # this can be done by adding a conditional to the expect script instead of having it twice,
  #  but I don't feel like looking up and escaping the syntax for that right now...
  #
  if [[ -n "$SudoUser" ]]; then
    expect -c "
set timeout 10
exp_internal $Debug
log_user $Debug
match_max 100000
spawn ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=keyboard-interactive,password -l $AccessUser $System
expect {
  \"*?assword:*\" { send -- \"$Pass\\r\" }
  eof { exit }
  timeout { exit }
}
expect -regexp \".*(\\\$|#).*\"
send -- \"sudo su - $RemoteUser\\r\"
expect {
  \".*?assword for $AccessUser:*\" { send -- \"$Pass\\r\" }
  eof { exit }
  timeout { exit }
}
expect -regexp \".*(\\\$|#).*\"
send -- \"grep -q \\\"$PublicKey\\\" .ssh/authorized_keys 2>/dev/null\\r\"
expect -regexp \".*(\\\$|#).*\"
send -- \"if \[ \\\$? -eq 1 \]; then echo \\\"$PublicKey\\\" >>.ssh/authorized_keys; fi\\r\"
expect -regexp \".*(\\\$|#).*\"
send -- \"exit\\r\"
expect -regexp \".*(\\\$|#).*\"
send -- \"exit\\r\"
expect eof
"
  else
    expect -c "
set timeout 10
exp_internal $Debug
log_user $Debug
match_max 100000
spawn ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=keyboard-interactive,password -l $AccessUser $System
expect {
  \"*?assword:*\" { send -- \"$Pass\\r\" }
  eof { exit }
  timeout { exit }
}
expect -regexp \".*(\\\$|#).*\"
send -- \"grep -q \\\"$PublicKey\\\" .ssh/authorized_keys 2>/dev/null\\r\"
expect -regexp \".*(\\\$|#).*\"
send -- \"if \[ \\\$? -eq 1 \]; then echo \\\"$PublicKey\\\" >>.ssh/authorized_keys; fi\\r\"
expect -regexp \".*(\\\$|#).*\"
send -- \"exit\\r\"
expect eof
"
  fi
}
