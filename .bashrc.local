# .bashrc.local
# add to bash via:
# echo 'if [ -e ~/.bashrc.local ] ; then source ~/.bashrc.local ; fi' >> ~/.bashrc


if [[ -e /etc/redhat-release ]]
then
	export _RHVERSION=$(grep 'release' /etc/redhat-release | sed 's/[A-Za-z\ ()]//g' | cut -f 1 -d.)
else
	export _RHVERSION=0
fi

export _CYGWIN=$(uname -a | grep Cygwin | wc -l)


if [[ $_RHVERSION -eq 7 ]]
then
	# CentOS 7 'w' command no longer shows IP addresses by default.. so fix it
	alias w='w -f'
fi

alias smoke='perl -MCPAN::Reporter::Smoker -e start'

# bash history items borrowed from https://github.com/fotinakis/bashrc/blob/master/init.sh
# Eternal bash history.
# ---------------------
# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "
# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history
#
# ---------------------
# Additional items borrowed from https://github.com/mavcunha/bash/blob/master/scripts/history
#
# Ignore 'clear', 'bg', 'fg', 'exit', and any command with a --help commandline
export HISTIGNORE="clear:bg:fg:exit:* --help"
# force history to flush after every command, so no history is lost
export PROMPT_COMMAND='history -a'
shopt -s histappend # always append to history
hf(){
 history | grep ${1:-"."} | tail -r -n 1000 | selecta | eval $(awk '{ $1=""; print $0 }')
}
histfreq() {
  history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head -n 15
}

#################### Shell completion functions
# set completes with set options
complete -A setopt set
# shopt completes with shopt options
complete -A shopt shopt
# other job commands
complete -j -P '"%' -S '"' fg jobs
####################

# misc aliases and functions
# ---------------------
tm () {
  tmux attach || tmux 
}
alias e='date +"%s"'
alias ls='ls -la'
alias sl='ls'


# Returns the first element in a list.
#     first_in_list (a b c)
#     > a
function first_in_list {
	local list=("$@")
	echo ${list[0]}
}

# Returns the last element in a list.
#     last_in_list (a b c)
#     > c
function last_in_list {
	local list=("$@")
	local count=${#list[@]}
	echo ${list[ (( $count -1 )) ]}
}


# Test an IP address for validity:
# Usage:
#      valid_ip IP_ADDRESS
#      if [[ $? -eq 0 ]]; then echo good; else echo bad; fi
#   OR
#      if valid_ip IP_ADDRESS; then echo good; else echo bad; fi
#
# SOURCE: http://www.linuxjournal.com/content/validating-ip-address-bash-script
#
function valid_ip() {
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS; IFS='.'; ip=($ip); IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

# convert subnet mask bits into a network mask
#   source: https://forum.openwrt.org/viewtopic.php?pid=220781#p220781
#
# required:
#   $1    X (where X is greater than or equal to 0 and less than or equal to 32)
#
function cdr2mask {
  test $# -ne 1 && return 1
  test "$1" != "${1/[^0-9]/}" && return 1
  if [[ $1 -lt 0 || $1 -gt 32 ]]; then return 1; fi
  set -- $(( 5 - ($1 / 8) )) 255 255 255 255 $(( (255 << (8 - ($1 % 8))) & 255 )) 0 0 0
  [ $1 -gt 1 ] && shift $1 || shift
  echo ${1-0}.${2-0}.${3-0}.${4-0}
  return 0
}

# convert subnet mask into subnet mask bits
#   source: https://forum.openwrt.org/viewtopic.php?pid=220781#p220781
#
# required
#   $1    W.X.Y.Z (a valid subnet mask)
#
function mask2cdr {
  valid_mask "$1" || return 1
  # Assumes there's no "255." after a non-255 byte in the mask
  local x=${1##*255.}
  set -- 0^^^128^192^224^240^248^252^254^ $(( (${#1} - ${#x})*2 )) ${x%%.*}
  x=${1%%$3*}
  echo $(( $2 + (${#x}/4) ))
  return 0
}


if [[ -e ~/.bashrc.local.gpl ]]
then
  source ~/.bashrc.local.gpl
fi

#unset _RHVERSION
#unset _CYGWIN
